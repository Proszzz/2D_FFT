1. DMA传输数据最后末尾产生几十个0，主要是应该在状态机上添加一些延时作用的状态，或者 增加一些计数部分再跳变状态，因为FFT核有了数据不会立马出去，还需要一些延迟
2. DMA Timeout 是由于触发信号的冲突，比如这个就是握手信号，Valid不应该由Ready信号决定，我这里是因为m_axis_data_tlast没有正确产生，导致运行有的时候成功，有的时候失败，fft_16_valid_out信号在最后一个数据不一定拉高，有下面两点原因


FFT核内部流水线延迟：FFT核通常有多级流水线，处理最后一个数据点时，valid信号的行为可能受内部处理延迟的影响，导致与计数器状态不同步。
AXI-Stream握手机制：FFT核可能在处理所有数据后有特殊的结束处理逻辑，使得最后的valid信号行为与其他数据点不同。

3. 最后结果出现16个数据，在头16次循环中出现了重复，这里解决是在给ram_data_valid加了延时，ram读出的数据不能直接valid，

4. DDR 32字节对齐，1  因为缓存行通常为32字节或64字节  2  若突发长度为8且32字节对齐，DDR控制器可一次性完成32字节传输，

现在存在几个问题：
1.除了第0行，第1行到第15行的16个数据重复 ——  正确重置计数器和缓冲区，之前在row_wait状态没有将data_count <= 0; col_count <= 0;也没有IDLE，DONE的置0，
2.ram读取地址只读取了 0 256  。。。7936，没有完成数据重排  ——说明列FFT处理没有正确跟踪数据索引或状态转换有问题，加了更明确的状态转换条件标志
3.第20行左右有不正常大的数据 ——通过增加等待周期和改进控制流，确保数据在处理前完全稳定

5.在main函数外面开一个数组，他的内存分配在数据区里；如果在main函数内部开数组，内存分配在栈区内。一般来说栈区的内存是比较小的，所以平常开一些小一点的数组是没问题的；但如果题目要求的数组比较大，那就会出现爆出的问题，程序无法访问内存就会出错；相对的，数据区的内存较大，所以开数组开在数据区/main函数外面，就不易出现这样的问题。

6.tlast信号没有正确产生（col_fft_done)